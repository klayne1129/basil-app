{"version":3,"sources":["images/logo2.png","Constants.js","components/recipes/AuthenticationService.js","components/recipes/AuthenticatedRoute.jsx","components/recipes/ErrorComponent.jsx","components/recipes/HeaderComponent.jsx","api/recipes/RecipeDataService.js","components/recipes/ListRecipesComponent.jsx","components/recipes/LoginComponent.jsx","components/recipes/LogoutComponent.jsx","components/recipes/WelcomeComponent.jsx","components/recipes/RecipeComponent.jsx","components/recipes/ViewRecipeComponent.jsx","components/recipes/SearchComponent.jsx","components/recipes/ContactComponent.jsx","api/recipes/UserDataService.js","components/recipes/UserListComponent.jsx","components/recipes/RegisterComponent.jsx","components/recipes/RecipeApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_URL","JPA_API_URL","username","password","axios","post","token","sessionStorage","setItem","this","setupAxiosInterceptors","createJWTToken","removeItem","getItem","user","interceptors","request","use","config","isUserLoggedIn","headers","authorization","get","createBasicAuthToken","window","btoa","AuthenticatedRoute","AuthenticationService","props","to","Component","ErrorComponent","HeaderComponent","getAdminUser","className","href","target","rel","src","logo","width","alt","onClick","logout","withRouter","name","Axios","id","delete","recipe","put","Recipe","Card","bg","style","marginTop","Img","variant","image","Header","title","Badge","mealType","ListGroup","ListRecipesComponent","state","recipes","refreshRecipes","bind","addRecipeClicked","console","log","getLoggedInUser","RecipeDataService","retrieveAllRecipes","then","response","setState","data","map","currentRecipe","i","key","history","push","role","length","CardColumns","recipeList","LoginComponent","handleKeyPress","e","executeJWTAuthenticationService","registerSuccessfulLoginForJwt","catch","showSuccessMessage","hasLoginFailed","handleChange","loginClicked","event","value","type","placeholder","onChange","onKeyPress","LogoutComponent","WelcomeComponent","handleSuccessfulResponse","handleError","welcomeClicked","welcomeMessage","errorMessage","error","message","RecipeComponent","match","params","directions","ingredients","notes","tags","prepTime","cookTime","servings","webLink","onSubmit","validate","retrieveRecipe","values","errors","createRecipe","updateRecipe","initialValues","validateOnChange","validateonBlur","enableReinitialize","component","as","selected","ViewRecipeComponent","refreshRecipe","printRecipeClicked","updatrecipeClicked","updateRecipeClicked","deleteRecipeClicked","print","deleteRecipe","size","split","item","SearchComponent","filterByField","filterByTerm","handleFilter","handleTerm","filterBy","searchterm","replace","toLowerCase","includes","searchBar","ButtonGroup","toggle","ToggleButton","checked","defaultChecked","ContactComponent","UserListComponent","users","deleteUserClicked","refreshUsers","UserDataService","retrieveAllUsers","deleteUser","RegisterComponent","verifyPassword","createUser","hasSignUpFailed","signUpClicked","RecipeApp","path","exact","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2aed9aeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.7518cefc.png\";","// export const API_URL = 'http://localhost:8080'\nexport const API_URL = 'https://basil-full-stack-backend.azurewebsites.net'\nexport const JPA_API_URL = `${API_URL}/jpa`","import axios from 'axios'\nimport { API_URL } from '../../Constants.js'\n//create a constant for the key used for session storage\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    // need to send a post request with the username and password\n    executeJWTAuthenticationService(username, password) {\n\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    //when a user logs out the value from session storage is removed\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    //checks to see if a user has logged in to app\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return false\n        }\n        return true\n    }\n\n    //gets a specific user\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return ''\n        }\n        return user\n    }\n    //checks if admin\n    getAdminUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === 'basil') {\n            return user\n        }\n        return ''\n    }\n\n    //this will add an dditional parameter to axios get method call to make sure it sends an \n    //authorization header\n    // Method adding an intercepter (see axios github documentation) by creating a simple method that\n    //adds an authorization header to every request.\n    // you want to call this method at log in.\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n\n\n    //connect to backend BasicAuthenticationController using path\n    executeBasicAuthenticationService(username, password) {\n\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    // whenever a user logs in successfully, send that data to session storage\n    registerSuccessfulLogin(username, password) {\n\n        // console.log(\"registered login\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n\n    }\n\n}\n\n//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService()","import React, {Component} from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\n//prevents unathenticated users from trying to access restricted pages via typing in the browser\nclass AuthenticatedRoute extends Component {\n    render() {\n\n        // calling a spread operator\n        //take all the properties and spread them out\n        if(AuthenticationService.isUserLoggedIn()){\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n    }\n}\n\nexport default AuthenticatedRoute","import React from 'react'\n\n\nfunction ErrorComponent() {\n    \n        return <div>An Error has occured. Page not found.</div>\n    \n}\n\nexport default ErrorComponent","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\nimport { withRouter } from 'react-router'\nimport logo from \"../../images/logo2.png\"\n\n//headers wont update when the Routers are called unless\n//HeaderComponent wrapped with a call to withRouter\n\n//the nav bar \n//menu links enabled/disabled based on user authentication\n//onClick with call to AuthenticationService.logout added to logout button\n//clears the session storage data\nclass HeaderComponent extends Component {\n    render() {\n\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn()\n        // console.log(isUserLoggedIn);\n        const getAdminUser = AuthenticationService.getAdminUser()\n\n        return (\n            //added target=\"_blank\" to open new window to github. \n            //Added rel=\"noopener noreferrer\" for security\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark navbar-custom\">\n                    <a className=\"navbar-brand\" href=\"https://github.com/klayne1129\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <img src={logo} width=\"70\" alt=\"github.com/klayne1129\" />\n                    </a>\n\n                    <ul className=\"navbar-nav\">\n                        {isUserLoggedIn && <li><Link to=\"/welcome/Basil\" className=\"nav-link\">Home</Link></li>}\n                        {isUserLoggedIn && <li><Link to=\"/recipes\" className=\"nav-link\">Recipes</Link></li>}\n                        {isUserLoggedIn && <li><Link to=\"/search\" className=\"nav-link\">Search</Link></li>}\n                    </ul>\n\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {isUserLoggedIn && <li><Link to=\"/contact\" className=\"nav-link\">Contact</Link></li>}\n                        {isUserLoggedIn && getAdminUser && <li><Link to=\"/userList\" className=\"nav-link\">Users</Link></li>}\n                        {!isUserLoggedIn && <li><Link to=\"/login\" className=\"nav-link\">Login</Link></li>}\n                        {!isUserLoggedIn && <li><Link to=\"/register\" className=\"nav-link\">Register</Link></li>}\n                        {isUserLoggedIn && <li><Link to=\"/logout\" className=\"nav-link\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default withRouter(HeaderComponent)\n\n","import Axios from \"axios\"\nimport {JPA_API_URL} from '../../Constants.js'\n\n\nclass RecipeDataService {\n    //passing name as a parameter makes it customizable for users\n\n    \n\n\n    //retrieves all the recipes the current user has saved.\n    retrieveAllRecipes(name) {\n        // console.log('executed service')\n        //tell promise to get desired url we created in java and eclipse\n        return Axios.get(`${JPA_API_URL}/users/${name}/recipes`)   \n    }\n\n    //retireves a specific recipe using the username and id of recipe\n    retrieveRecipe(name, id) {\n        \n        return Axios.get(`${JPA_API_URL}/users/${name}/recipes/${id}`)   \n    }\n\n    //deletes recipe\n    deleteRecipe(name, id) {\n        \n        return Axios.delete(`${JPA_API_URL}/users/${name}/recipes/${id}`)   \n    }\n\n    //updates recipe\n    updateRecipe(name, id, recipe) {\n        // console.log('executed service')\n        //tell promise to get desired url created in java/eclipse\n        return Axios.put(`${JPA_API_URL}/users/${name}/recipes/${id}`, recipe)   \n    }\n\n        //creates new recipe\n    createRecipe(name, recipe) {\n        // console.log('executed service')\n        //tell promise to get desired url created in java/eclipses\n        return Axios.post(`${JPA_API_URL}/users/${name}/recipes`, recipe)   \n    }\n\n\n}\n\nexport default new RecipeDataService()","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport { Card, ListGroup, CardColumns, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport logo from \"../../images/logo2.png\"\n\n//view all recipes in a list view\nconst Recipe = props => (\n\n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n        <Card className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n            <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n            <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n            <ListGroup variant=\"flush\" >\n            </ListGroup>\n        </Card>\n    </Link>\n\n)\n\nclass ListRecipesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: []\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.addRecipeClicked = this.addRecipeClicked.bind(this);\n\n\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes() {\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({ recipes: response.data })\n                }\n            )\n    }\n\n\n    recipeList() {\n\n        return this.state.recipes.map(function (currentRecipe, i) {\n\n            return <Recipe recipe={currentRecipe} key={i} />\n\n        });\n    }\n    // push to that new recipe page \n    addRecipeClicked() {\n        this.props.history.push(`/recipes/-1`)\n    }\n\n    render() {\n\n        return (\n\n            <div className='container pt-4' role='main'>\n                <div className=\"row\">\n                    <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n\n                </div>\n                <br></br>\n\n                <img src={logo} width=\"200\" alt=\"github.com/klayne1129\" />\n                <br></br>\n                <br></br>\n                {this.state.recipes.length === 0 && <p className=\"lead\">Looks pretty empty in here! Click \"Add Recipe\" to create a new recipe.</p>}\n                {this.state.recipes.length !== 0 && <p className=\"lead\">Click on the recipe card for ingredients and steps!</p>}\n                \n                <br></br>\n\n\n                <CardColumns>{this.recipeList()}\n\n                </CardColumns>\n                \n            </div>\n\n        )\n    }\n}\n\nexport default ListRecipesComponent\n","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        // added state to component\n        this.state = {\n            username: '',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n\n        }\n        //bind methods\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n\n    }\n    //whenever there is a change in a text element an event will handle it\n    //event updates the state \n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    //Call the JWTAuthenticationService, if succesful response comes back,\n    //register a token for the intercepter so token will be used on,\n    //every subsequent request\n    loginClicked() {\n        AuthenticationService\n            .executeJWTAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n    }\n\n\n    handleKeyPress = e => {\n        if (e.key === \"Enter\") {\n            AuthenticationService\n                .executeJWTAuthenticationService(this.state.username, this.state.password)\n                .then((response) => {\n                    AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                    this.props.history.push(`/welcome/${this.state.username}`)\n                }).catch(() => {\n                    this.setState({ showSuccessMessage: false })\n                    this.setState({ hasLoginFailed: true })\n                })\n        }\n    }\n\n    render() {\n        return (\n\n\n            <div >\n                <h1>Login</h1>\n                \n                <div className=\"container\">\n\n                    {/* give userfeedback based on credentials */}\n                    {/* if true show message */}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Successful</div>}\n                    \n                    Username: <input type=\"text\" name=\"username\" placeholder='current username' value={this.state.username} onChange={this.handleChange} />\n\n                    Password: <input type=\"password\" name=\"password\" placeholder='current password' value={this.state.password} onChange={this.handleChange} onKeyPress={this.handleKeyPress} />\n\n                    <button type='submit' className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n \n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, { Component } from 'react'\n\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out.</h1>\n                <div className=\"container\">Thanks for using Basil!</div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from 'react'\nimport logo from \"../../images/logo2.png\"\nimport AuthenticationService from './AuthenticationService.js'\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.welcomeClicked = this.welcomeClicked.bind(this)\n        this.state = {\n            welcomeMessage: '',\n            errorMessage: ''\n\n        }\n\n    }\n\n    welcomeClicked() {\n        console.log(\"welcome clicked\")\n        this.props.history.push(`/recipes`)\n    }\n\n    handleError(error) {\n        console.log(error.response)\n        let errorMessage = '';\n        if (errorMessage) {\n            errorMessage += error.message\n        }\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n        this.setState({ errorMessage: errorMessage })\n    }\n    handleSuccessfulResponse(response) {\n        this.setState({ welcomeMessage: response.data.message })\n    }\n\n    render() {\n        return (\n\n            <>\n                <div className=\"container\">\n\n                    {/*Jumbotron Header*/}\n                    \n                    <header className=\"jumbotron my-4\">\n                    <img src={logo} width=\"300\" alt=\"github.com/klayne1129\" />\n                        <h1 className=\"display-3\">Welcome {AuthenticationService.getLoggedInUser()}!</h1>\n                        <p className=\"lead\">\n                            Hey there! Basil is designed to be your own personal recipe database. \n                            Whether its from your favorite food blog or your family's recipe book, \n                            all recipes can be stored here. Click the button below to get started.</p>\n                        <button className=\"btn btn-dark btn-lg\" onClick={this.welcomeClicked}>View my recipes!</button>\n                    </header>\n\n                    <div className=\"container\">\n                        {this.state.welcomeMessage}\n                    </div>\n\n                    {/* errors */}\n                    <div className=\"container\">\n                        {this.state.errorMessage}\n                    </div>\n\n                </div>\n\n            </>\n\n        )\n    }\n}\n\n\nexport default WelcomeComponent","import React, { Component } from 'react'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\n//create recipe page\n\nclass RecipeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            title: '',\n            directions: '',\n            ingredients: '',\n            notes: '',\n            mealType: 'selectOne',\n            image: '',\n            tags: '',\n            prepTime: '',\n            cookTime: '',\n            servings: '',\n            webLink: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n\n    }\n    //call api's in this function\n    //Get specific recipe using usernamme and Id\n    //then update the object\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        RecipeDataService.retrieveRecipe(username, this.state.id)\n            .then(response => this.setState({\n                title: response.data.title,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients,\n                notes: response.data.notes,\n                mealType: response.data.mealType,\n                image: response.data.image,\n                tags: response.data.tags,\n                prepTime: response.data.prepTime,\n                cookTime: response.data.cookTime,\n                servings: response.data.servings,\n                webLink: response.data.webLink\n            }))\n    }\n\n\n\n    // if no value present 'enter blank'\n    // custom error message using errorMessage props\n    //errororMessage below unde render()\n\n    validate(values) {\n        let errors = {}\n        if (!values.title) {\n            errors.title = 'Enter title'\n        } else if (values.title.length < 2) {\n            errors.title = 'Title must be at least 2 characters in length'\n        }\n\n        if (!values.directions) {\n            errors.directions = 'Enter directions'\n        } else if (values.directions.length < 5) {\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if (!values.ingredients) {\n            errors.ingredients = 'Enter ingredients'\n        } else if (values.ingredients.length < 2) {\n            errors.ingredients = 'Ingredients must be at least 2 characters in length'\n        }\n\n        if (values.mealType === \"selectOne\") {\n            errors.mealType = 'Select a meal type'\n        }\n\n        return errors\n    }\n\n    onSubmit(values) {\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        let recipe = {\n            id: this.state.id,\n            title: values.title,\n            directions: values.directions,\n            ingredients: values.ingredients,\n            notes: values.notes,\n            mealType: values.mealType,\n            image: values.image,\n            tags: values.tags,\n            prepTime: values.prepTime,\n            cookTime: values.cookTime,\n            servings: values.servings,\n            webLink: values.webLink\n        }\n\n        if (this.state.id === -1) {\n            RecipeDataService.createRecipe(username, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n\n        } else {\n            RecipeDataService.updateRecipe(username, this.state.id, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n        }\n\n    }\n\n    render() {\n        //destructuring \n        let { title, directions, ingredients, notes, mealType, image, tags, prepTime, cookTime, servings, webLink } = this.state\n\n        return (\n\n            <div>\n                <h1>My Recipe</h1>\n                <div className='container'>\n\n                    {/* defining a method that accepts props as input \n                        and returns the html of the form */}\n                    <Formik\n\n                        // usually you would need to list initial values as key value pairs\n                        // but if the key is the same as the value you only have to \n                        // list the value (name, directions, ingredients)\n                        initialValues={{ title, directions, ingredients, notes, mealType, image, tags, prepTime, cookTime, servings, webLink }}\n\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='title' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='mealType' component='div' className='alert alert-warning' />\n\n                                    <fieldset className='form-group'>\n                                        <label>Title</label>\n                                        <Field className='form-control' type='text' name='title'  placeholder=\"Mama Freddie's Spaghetti\"/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Serving Size (Optional)</label>\n                                        <Field className='form-control' type='text' name='servings'  placeholder='8 servings'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Prep Time (Optional)</label>\n                                        <Field className='form-control' type='text' name='prepTime'  placeholder='5 mins'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Cook Time (Optional)</label>\n                                        <Field className='form-control' type='text' name='cookTime' placeholder='20 mins'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Ingredients</label>\n                                        <Field as='textarea' className='form-control' type='text' name='ingredients' id='textBox' placeholder='pasta sauce&#10;spaghetti noodles&#10;'/>\n                                        <p>Please press enter after each ingredient except the last one. Each ingredient should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Directions</label>\n                                        <Field as='textarea' className='form-control' type='text' name='directions' id='textBox' placeholder='First boil water&#10;Place dry spaghetti noodles into boiling water&#10;' />\n                                        <p>Please press enter after each step except the last step. Each step should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Notes (Optional)</label>\n                                        <Field className='form-control' type='text' name='notes' id='textBox' placeholder='Can freeze for meal prep.' />\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Meal Type</label>\n                                        <Field as='select' name='mealType'>\n                                            <option selected value='selectOne'>Select One</option>\n                                            <option value='entree'>Entree</option>\n                                            <option value='drink'>Drink</option>\n                                            <option value='snack'>Snack</option>\n                                            <option value='dessert'>Dessert</option>\n                                            <option value='side'>Side</option>\n                                            <option value='app'>Appetizer</option>\n                                        </Field>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Tags (Optional)</label>\n                                        <Field className='form-control' type='text' name='tags' placeholder='easy,itallian,pasta'/>\n                                        <p>Please seperate each tag with a comma.</p>\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label>Image URL (Optional)</label>\n                                        <Field type=\"text\" className=\"form-control\" name='image' placeholder=\"https://www.spendwithpennies.com/wp-content/uploads/2019/03/Spaghetti-and-Meatballs-SpendWithPennies-4.jpg\"/>\n                                        <p>If you see an image online you would like to use, right click image and hit \"open image in new tab\". Copy the url in your browser and paste it here.</p>\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label>Website URL (Optional)</label>\n                                        <Field type=\"text\" className=\"form-control\" name='webLink' placeholder=\"www.Freddie'sAwesomeSpaghetti.com\"/>\n                                        <p>Copy the desired website's url and paste it here.</p>\n                                    </fieldset>\n\n                                    <button type=\"submit\" className='btn btn-success'>Save</button>\n\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default RecipeComponent\n\n","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\n\n// view of single recipe\nclass ViewRecipeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.match.params.id,\n            title: '',\n            directions: '',\n            ingredients: '',\n            notes: '',\n            mealType: '',\n            image: '',\n            tags: '',\n            prepTime: '',\n            cookTime: '',\n            servings: '',\n            webLink: ''\n\n        }\n        this.refreshRecipe = this.refreshRecipe.bind(this);\n        this.printRecipeClicked = this.printRecipeClicked.bind(this);\n        this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n        this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n    }\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipe();\n    }\n\n    refreshRecipe() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        RecipeDataService.retrieveRecipe(username, this.state.id)\n            .then(response => this.setState({\n                title: response.data.title,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients,\n                notes: response.data.notes,\n                mealType: response.data.mealType,\n                image: response.data.image,\n                tags: response.data.tags,\n                prepTime: response.data.prepTime,\n                cookTime: response.data.cookTime,\n                servings: response.data.servings,\n                webLink: response.data.webLink\n            }))\n    }\n\n    refreshRecipes() {\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    this.setState({ recipes: response.data })\n                }\n            )\n    }\n    printRecipeClicked() {\n        console.log(\"print\")\n        window.print();\n    }\n\n    // push to that specific recipe page by id to edit\n    updateRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/recipes/${this.state.id}`)\n    }\n\n    //    deletes recipe with username and id match, refreshes the recipe list\n    deleteRecipeClicked(id) {\n        let username = AuthenticationService.getLoggedInUser()\n        // console.log(id + \" \" + username)\n        RecipeDataService.deleteRecipe(username, id)\n            .then(\n                response => {\n                    this.refreshRecipes()\n                    this.props.history.push(`/recipes`)\n                }\n            )\n    }\n\n    render() {\n\n        return (\n\n            <div className='container pt-4' role='main'>\n                <div className=\"row\">\n                    <button className=\"btn btn-dark\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button>\n                    <button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(this.state.id)} >Edit</button>\n                    <button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(this.state.id)} >Delete</button>\n                </div>\n\n                <div>\n\n                    <div>\n                        {this.state.title !== '' && <h1>{this.state.title}</h1>}\n                        {this.state.image !== '' && <img className='recipelistimage' src={this.state.image} alt='recipe'></img>}\n                    </div>\n                    <hr />\n                    <div className=\"row\">\n                            <h5><pre>Servings: </pre></h5>\n                            {this.state.servings !== '' && <p>{this.state.servings}</p>}\n                            <hr width=\"1\" size=\"1000%\"/>\n                            <h5><pre>Prep Time: </pre></h5>\n                            {this.state.prepTime !== '' && <p>{this.state.prepTime}</p>}\n                            <hr width=\"1\" size=\"1000%\"/>\n                            <h5><pre>Cook Time: </pre></h5>\n                            {this.state.cookTime !== '' && <p>{this.state.cookTime}</p>}\n                            <hr width=\"1\" size=\"1000%\"/>\n                        </div>\n                        <hr />\n                    <div>\n                \n                        <h2>Ingredients:</h2>\n                        {this.state.ingredients !== '' && <p className='lead'><ul>{this.state.ingredients.split('\\n').map((item, key) => {\n                            return <li key={key}>{item}</li>\n                        })}</ul></p>}\n                        <hr />\n                        <h2>Steps:</h2>\n                        {this.state.directions !== '' && <p className='lead'><ol>{this.state.directions.split('\\n').map((item, key) => {\n                            return <li key={key}>{item}</li>\n                        })}</ol></p>}\n\n                        <hr />\n\n                        <div>\n                        <h5>Notes:</h5>\n                        {this.state.notes !== '' && <p className='lead'><ul>{this.state.notes}</ul></p>}\n                        <hr />\n                        <h5>Website URL:</h5>\n                        <a href={this.state.webLink} target=\"_blank\" rel=\"noopener noreferrer\">{this.state.webLink}</a>\n                        <hr />\n                        </div>\n\n                        <div className='row'>\n                        <hr width=\"1\" size=\"100%\"/>\n                        <h5>Tags:</h5>\n                        {this.state.tags !== '' && <p className='lead'><ul>{this.state.tags.split(',').map((item, key) => {\n                            return <li key={key}>{item}</li>\n                        })}</ul></p>}\n                        <hr width=\"1\" size=\"100%\"/>\n                        <h5>Meal Type:</h5>\n                        <p className='lead'><ul>{this.state.mealType}</ul></p>\n                        <hr width=\"1\" size=\"100%\"/>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div>\n\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ViewRecipeComponent","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport { Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport logo from \"../../images/logo2.png\"\n\n\nconst Recipe = props => (\n\n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n        <Card className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n            <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n            <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n            <ListGroup variant=\"flush\" >\n            </ListGroup>\n        </Card>\n    </Link>\n\n\n)\n\nclass SearchComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: [],\n            filterByField: \"all\",\n            filterByTerm: ''\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.handleFilter = this.handleFilter.bind(this);\n        this.handleTerm = this.handleTerm.bind(this);\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes() {\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    this.setState({ recipes: response.data })\n                }\n            )\n    }\n\n    //looks at the state's filterByTerm and filterByField\n    //returns a list of recipes based on params\n\n    recipeList() {\n        let filterBy = this.state.filterByField\n        let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '')\n        return this.state.recipes.map(function (currentRecipe, i) {\n\n\n            if ((filterBy === 'all' && (currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase())\n                || currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase())\n                || currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase())\n                || currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())))\n                || (filterBy === 'title' && currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()))\n                || (filterBy === 'ingredients' && currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()))\n                || (filterBy === 'tags' && currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase()))\n                || (filterBy === 'mealType' && currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())))\n                return <Recipe recipe={currentRecipe} key={i} />\n        });\n    }\n    //Handles any changes to the search category\n    handleFilter(e) {\n        this.setState({\n            filterByTerm: '',\n            filterByField: e.target.value\n        })\n    }\n    //Handles any changes to search term\n    handleTerm(e) {\n        this.setState({\n            filterByTerm: e.target.value\n        })\n    }\n\n    render() {\n        //searchbar variable\n        let searchBar;\n\n        //if the search field is filtering by recipe mealType, it will set searchBar to a group of radio buttons\n        if (this.state.filterByField === 'mealType') {\n            searchBar =\n                <div className='form-group row'><ButtonGroup toggle className=\"mt-1 ml-3\" >\n\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"entree\"\n                        checked={this.state.filterByTerm === \"entree\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Entrees\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"dessert\"\n                        checked={this.state.filterByTerm === \"dessert\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Desserts\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"snack\"\n                        checked={this.state.filterByTerm === \"snack\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Snacks\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"drink\"\n                        checked={this.state.filterByTerm === \"drink\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Drinks\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"side\"\n                        checked={this.state.filterByTerm === \"side\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Sides\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\"\n                        name=\"radio\"\n                        value=\"app\"\n                        checked={this.state.filterByTerm === \"app\"}\n                        onChange={this.handleTerm}\n                        variant='dark'>\n                        Appetizers\n                    </ToggleButton>\n\n\n                </ButtonGroup></div>\n\n            //if search Field is set to anything other than mealType, it sets searchBar to a text input that will live update due to how the onChange attribute works\n        } else {\n            searchBar =\n                <div className='form-group row'>\n                    <div className='col-xs-4'>\n                        <input placeholder='SearchTerm'\n                            value={this.state.filterByTerm}\n                            className='inputmargin form-control'\n                            type='text'\n                            onChange={this.handleTerm}>\n                        </input>\n                    </div>\n                </div>\n        }\n\n        return (\n\n            <div className='container pt-4' role='main'>\n                <br></br>\n                {/* <h3 className='mt-3 ml-2 display-3'>Basil</h3> */}\n                <img src={logo} width=\"200\" alt=\"github.com/klayne1129\" />\n                <br></br>\n                <br></br>\n                <div className='container '>\n                    <h5>Search by:</h5>\n                    <ButtonGroup toggle className=\"\" >\n                        <ToggleButton type=\"radio\"\n                            name=\"radio\"\n                            defaultChecked\n                            value=\"all\"\n                            checked={this.state.filterByField === \"all\"}\n                            onChange={this.handleFilter}\n                            variant='dark'>\n\n                            All\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\"\n                            name=\"radio\"\n                            defaultChecked\n                            value=\"title\"\n                            checked={this.state.filterByField === \"title\"}\n                            onChange={this.handleFilter}\n                            variant='dark'>\n                            Name\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\"\n                            name=\"radio\"\n                            defaultChecked\n                            value=\"ingredients\"\n                            checked={this.state.filterByField === \"ingredients\"}\n                            onChange={this.handleFilter}\n                            variant='dark'>\n                            Ingredients\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\"\n                            name=\"radio\"\n                            defaultChecked\n                            value=\"mealType\"\n                            checked={this.state.filterByField === \"mealType\"}\n                            onChange={this.handleFilter}\n                            variant='dark'>\n                            Meal Type\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\"\n                            name=\"radio\"\n                            defaultChecked\n                            value=\"tags\"\n                            checked={this.state.filterByField === \"tags\"}\n                            onChange={this.handleFilter}\n                            variant='dark'>\n                            Tags\n                        </ToggleButton>\n\n                    </ButtonGroup>\n\n                    {searchBar}\n\n                </div>\n\n                <CardColumns>{this.recipeList()}</CardColumns>\n            </div>\n        )\n    }\n}\n\n\nexport default SearchComponent","import React, { Component } from 'react'\nimport logo from \"../../images/logo2.png\"\n\n\n\nclass ContactComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.state = {\n            welcomeMessage: '',\n            errorMessage: ''\n\n        }\n    }\n    render() {\n        return (\n\n            \n            <>\n\n                <div>\n\n                </div>\n                <br></br>\n                <img src={logo} width=\"200\" alt=\"github.com/klayne1129\" />\n                <br></br>\n                <br></br>\n                <div className=\"container\">\n\n                    \n                    <h3>You can contact me here:</h3>\n\n                    <div id=\"list\">\n                        <ul>\n                            <li><a href=\"https://github.com/klayne1129\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></li>\n                            <li><a href=\"https://www.linkedin.com/in/katie-layne-5892031a2/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></li>\n                        </ul>\n                    </div>\n                    <p>Or, you can send me an email <a href=\"mailto:klayne1129@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n                </div>\n\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n\n            </>\n\n        )\n    }\n\n    handleSuccessfulResponse(response) {\n        this.setState({ welcomeMessage: response.data.message })\n    }\n\n    handleError(error) {\n        console.log(error.response)\n        let errorMessage = '';\n        if (errorMessage) {\n            errorMessage += error.message\n        }\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n        this.setState({ errorMessage: errorMessage })\n    }\n\n}\n\n\nexport default ContactComponent","import Axios from \"axios\"\nimport {JPA_API_URL} from '../../Constants.js'\n\n\nclass UserDataService {\n    \n    //retireves a specific user using the username \n    retrieveUser(id) {\n        \n        return Axios.get(`${JPA_API_URL}/users/${id}`)   \n    }\n\n\n    //creates new user\n    createUser(user) {\n        // console.log('executed service')\n        //tell promise to get desired url created in java/eclipses\n        return Axios.post(`${JPA_API_URL}/users`, user)   \n    }\n\n\n    //retrieves all users.\n    retrieveAllUsers() {\n        return Axios.get(`${JPA_API_URL}/users`)   \n    }\n\n    deleteUser(id) {\n        \n        return Axios.delete(`${JPA_API_URL}/users/${id}`)   \n    }\n\n}\n\nexport default new UserDataService()","\nimport React, { Component } from 'react'\nimport UserDataService from '../../api/recipes/UserDataService.js'\n\n\n\nclass UserListComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            users: [],\n            message: null\n        }\n        this.deleteUserClicked = this.deleteUserClicked.bind(this);\n        this.refreshUsers = this.refreshUsers.bind(this);\n    }\n\n    //dont call initial api in the constructor\n    //if you do the state doesn't reinitialize until the api is finished \n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshUsers();\n    }\n\n    refreshUsers() {\n\n        UserDataService.retrieveAllUsers()\n            .then(\n                response => {\n                    this.setState({ users: response.data })\n                }\n            )\n    }\n\n    deleteUserClicked(id) {\n        UserDataService.deleteUser(id)\n            .then(\n                response => {\n                    this.setState({ message: `Deletion of user ${id} successful.` })\n                    this.refreshUsers()\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Active User List</h1>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Username</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.users.map(\n                                    user =>\n                                        <tr key={user.id}>\n                                            <td>{user.username}</td>\n                                            <td><button className=\"btn btn-danger\" onClick={() => this.deleteUserClicked(user.id)} >Delete</button></td>\n                                        </tr>\n                                )\n                            }\n\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UserListComponent","import React, { Component } from 'react'\nimport UserDataService from '../../api/recipes/UserDataService.js'\n\n\n\n\nclass RegisterComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            verifyPassword: '',\n            role: \"ROLE_USER\",\n            hasSignUpFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.signUpClicked = this.signUpClicked.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n\n    }\n\n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    signUpClicked() {\n        let user = {\n            username: this.state.username,\n            password: this.state.password,\n            role: \"ROLE_USER\"\n        }\n\n        if (this.state.password === this.state.verifyPassword) {\n            UserDataService.createUser(user)\n            this.setState({ showSuccessMessage: true })\n            this.setState({ hasSignUpFailed: false })\n        } else {\n            this.setState({ showSuccessMessage: false })\n            this.setState({ hasSignUpFailed: true })\n        }\n    }\n\n    handleKeyPress = e => {\n        if (e.key === \"Enter\") {\n            let user = {\n                username: this.state.username,\n                password: this.state.password,\n                role: \"ROLE_USER\"\n            }\n    \n            if (this.state.password === this.state.verifyPassword) {\n                UserDataService.createUser(user)\n                this.setState({ showSuccessMessage: true })\n                this.setState({ hasSignUpFailed: false })\n            } else {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasSignUpFailed: true })\n            }\n        }\n    }\n\n    \n\n    render() {\n        return (\n            <div >\n                <h1>Registration</h1>\n                {this.state.hasSignUpFailed && <div className=\"alert alert-warning\">Passwords do not match!</div>}\n                {this.state.showSuccessMessage && <div className=\"alert alert-success\">Registration successful. Return to login page.</div>}\n                <div className=\"container\">\n\n                    <label>Username: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} /></label>\n\n                    <label>Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} /></label>\n                    <label>Verify Password: <input type=\"password\" name=\"verifyPassword\" value={this.state.verifyPassword} onChange={this.handleChange} onKeyPress={this.handleKeyPress}/></label>\n                    <button type='submit' className=\"btn btn-success\" onClick={this.signUpClicked}>Sign Up</button>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RegisterComponent","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\n// import FooterComponent from './FooterComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport ListRecipesComponent from './ListRecipesComponent.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\nimport RecipeComponent from './RecipeComponent.jsx'\nimport ViewRecipeComponent from './ViewRecipeComponent.jsx'\nimport SearchComponent from './SearchComponent.jsx'\nimport ContactComponent from './ContactComponent.jsx'\nimport UserListComponent from './UserListComponent.jsx'\nimport RegisterComponent from './RegisterComponent.jsx';\n\n\n\nclass RecipeApp extends Component {\n    render() {\n        return (\n            <div className=\"RecipeApp\">\n\n                {/* allows you to type in browser to route to specific pages */}\n                <Router>\n                    <>\n                        <HeaderComponent />\n                        {/* switch makes sure only one route is active at a time */}\n                        {/* AuthenticatedRoute prevents unathenticated users from trying \n                            to access restricted pages via typing in the browser \n                            RecipeComponent must have higher priority than ListRecipesComponent\n                        Place it higher*/}\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login\" component={LoginComponent} />\n                            <Route path=\"/register\" component={RegisterComponent} />\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent} />\n                            <AuthenticatedRoute path=\"/recipes/:id\" component={RecipeComponent} />\n                            <AuthenticatedRoute path=\"/recipes\" component={ListRecipesComponent} />\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent} />\n                            <AuthenticatedRoute path=\"/view/:id\" component={ViewRecipeComponent} />\n                            <AuthenticatedRoute path=\"/search\" component={SearchComponent} />\n                            <AuthenticatedRoute path=\"/contact\" component={ContactComponent} />\n                            <AuthenticatedRoute path=\"/userList\" component={UserListComponent} />\n                            <Route component={ErrorComponent} />\n                        </Switch>\n                        {/* <FooterComponent/> */}\n                    </>\n                </Router>\n\n            </div>\n\n        )\n    }\n}\n\nexport default RecipeApp\n\n\n","import React, { Component } from 'react';\nimport RecipeApp from './components/recipes/RecipeApp';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n \n\n// Anything you want to appear on your browser you must ask the \"app\" to show it bc its the root\n//use jsx\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Counter/> */}\n        <RecipeApp/>\n\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}