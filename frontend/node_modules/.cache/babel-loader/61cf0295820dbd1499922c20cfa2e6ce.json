{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basilClone/basil-app/frontend/src/components/recipes/LoginComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super(props); // added state to component\n\n    this.handleKeyPress = e => {\n      if (e.key === \"Enter\") {\n        AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password).then(response => {\n          AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n          this.props.history.push(`/welcome/${this.state.username}`);\n        }).catch(() => {\n          this.setState({\n            showSuccessMessage: false\n          });\n          this.setState({\n            hasLoginFailed: true\n          });\n        });\n      }\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      hasLoginFailed: false,\n      showSuccessMessage: false\n    }; //bind methods\n\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  } //whenever there is a change in a text element an event will handle it\n  //event updates the state \n\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.title) {\n      errors.title = 'Enter title';\n    } else if (values.title.length < 2) {\n      errors.title = 'Title must be at least 2 characters in length';\n    }\n\n    if (!values.directions) {\n      errors.directions = 'Enter directions';\n    } else if (values.directions.length < 5) {\n      errors.directions = 'Directions must be at least 5 characters in length';\n    }\n\n    if (!values.ingredients) {\n      errors.ingredients = 'Enter ingredients';\n    } else if (values.ingredients.length < 2) {\n      errors.ingredients = 'Ingredients must be at least 2 characters in length';\n    }\n\n    if (values.mealType === \"selectOne\") {\n      errors.mealType = 'Select a meal type';\n    }\n\n    return errors;\n  } //Call the JWTAuthenticationService, if succesful response comes back,\n  //register a token for the intercepter so token will be used on,\n  //every subsequent request\n\n\n  loginClicked() {\n    AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password).then(response => {\n      AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n      this.props.history.push(`/welcome/${this.state.username}`);\n    }).catch(() => {\n      this.setState({\n        showSuccessMessage: false\n      });\n      this.setState({\n        hasLoginFailed: true\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      onSubmit: this.loginClicked,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"title\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"directions\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"ingredients\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"mealType\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), this.state.hasLoginFailed && React.createElement(\"div\", {\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Invalid Credentials\"), this.state.showSuccessMessage && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Login Successful\"), \"Username: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"current username\",\n      value: this.state.username,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), \"Password: \", React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"current password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      onClick: this.loginClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Login\")))));\n  }\n\n}\n\nexport default LoginComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basilClone/basil-app/frontend/src/components/recipes/LoginComponent.jsx"],"names":["React","Component","AuthenticationService","Formik","Form","Field","ErrorMessage","LoginComponent","constructor","props","handleKeyPress","e","key","executeJWTAuthenticationService","state","username","password","then","response","registerSuccessfulLoginForJwt","data","token","history","push","catch","setState","showSuccessMessage","hasLoginFailed","handleChange","bind","loginClicked","event","target","name","value","validate","values","errors","title","length","directions","ingredients","mealType","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        // added state to component\n        this.state = {\n            username: '',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n\n        }\n        //bind methods\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n\n    }\n    //whenever there is a change in a text element an event will handle it\n    //event updates the state \n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.title) {\n            errors.title = 'Enter title'\n        } else if (values.title.length < 2) {\n            errors.title = 'Title must be at least 2 characters in length'\n        }\n\n        if (!values.directions) {\n            errors.directions = 'Enter directions'\n        } else if (values.directions.length < 5) {\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if (!values.ingredients) {\n            errors.ingredients = 'Enter ingredients'\n        } else if (values.ingredients.length < 2) {\n            errors.ingredients = 'Ingredients must be at least 2 characters in length'\n        }\n\n        if (values.mealType === \"selectOne\") {\n            errors.mealType = 'Select a meal type'\n        }\n\n        return errors\n    }\n\n    //Call the JWTAuthenticationService, if succesful response comes back,\n    //register a token for the intercepter so token will be used on,\n    //every subsequent request\n    loginClicked() {\n        AuthenticationService\n            .executeJWTAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n    }\n\n\n    handleKeyPress = e => {\n        if (e.key === \"Enter\") {\n            AuthenticationService\n                .executeJWTAuthenticationService(this.state.username, this.state.password)\n                .then((response) => {\n                    AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                    this.props.history.push(`/welcome/${this.state.username}`)\n                }).catch(() => {\n                    this.setState({ showSuccessMessage: false })\n                    this.setState({ hasLoginFailed: true })\n                })\n        }\n    }\n\n    render() {\n        return (\n\n\n            <div >\n                <h1>Login</h1>\n\n                \n                \n                <div className=\"container\">\n                <Formik\n                        onSubmit={this.loginClicked}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='title' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='mealType' component='div' className='alert alert-warning' />\n\n                    {/* give userfeedback based on credentials */}\n                    {/* if true show message */}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Successful</div>}\n                    \n                    Username: <input type=\"text\" name=\"username\" placeholder='current username' value={this.state.username} onChange={this.handleChange} />\n\n                    Password: <input type=\"password\" name=\"password\" placeholder='current password' value={this.state.password} onChange={this.handleChange} onKeyPress={this.handleKeyPress} />\n\n                    <button type='submit' className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                    </Form>\n                            )\n                            }\n                            </Formik>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default LoginComponent"]},"metadata":{},"sourceType":"module"}