{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basilClone/basil-app/frontend/src/components/recipes/RegisterComponent.jsx\";\nimport React, { Component } from 'react';\nimport UserDataService from '../../api/recipes/UserDataService.js';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass RegisterComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      verifyPassword: '',\n      role: \"ROLE_USER\",\n      hasSignUpFailed: false,\n      showSuccessMessage: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.signUpClicked = this.signUpClicked.bind(this); // this.handleKeyPress = this.handleKeyPress.bind(this)\n\n    this.validate = this.validate.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  signUpClicked() {\n    let user = {\n      username: this.state.username,\n      password: this.state.password,\n      role: \"ROLE_USER\"\n    };\n    UserDataService.createUser(user);\n  } // signUpClicked() {\n  //     let user = {\n  //         username: this.state.username,\n  //         password: this.state.password,\n  //         role: \"ROLE_USER\"\n  //     }\n  //     if (this.state.password === this.state.verifyPassword) {\n  //         UserDataService.createUser(user)\n  //         this.setState({ showSuccessMessage: true })\n  //         this.setState({ hasSignUpFailed: false })\n  //     } else {\n  //         this.setState({ showSuccessMessage: false })\n  //         this.setState({ hasSignUpFailed: true })\n  //     }\n  // }\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.username) {\n      errors.username = 'Username can not be blank.';\n    } else if (values.username.length < 3 || values.username.length > 50) {\n      errors.username = 'Username must be between 3 - 50 characters in length';\n    }\n\n    if (!values.password) {\n      errors.password = 'Password can not be blank.';\n    } else if (values.password.length < 3 || values.password.length > 50) {\n      errors.password = 'Password must be between 3 - 50 characters in length';\n    }\n\n    if (values.verifyPassword !== values.password) {\n      errors.verifyPassword = 'Password do not match';\n    }\n\n    return errors;\n  } // handleKeyPress = e => {\n  //     if (e.key === \"Enter\") {\n  //         let user = {\n  //             username: this.state.username,\n  //             password: this.state.password,\n  //             role: \"ROLE_USER\"\n  //         }\n  //         if (this.state.password === this.state.verifyPassword) {\n  //             UserDataService.createUser(user)\n  //             this.setState({ showSuccessMessage: true })\n  //             this.setState({ hasSignUpFailed: false })\n  //         } else {\n  //             this.setState({ showSuccessMessage: false })\n  //             this.setState({ hasSignUpFailed: true })\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    let {\n      username,\n      password,\n      verifyPassword,\n      showSuccessMessage,\n      hasSignUpFailed\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Registration\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        username,\n        password,\n        verifyPassword,\n        showSuccessMessage,\n        hasSignUpFailed\n      } //sends ErrorMessages when validation fails only whens button clicked\n      //form only submited if validation passed \n      //enable reinitialization on formic or it will\n      //not update initial values, default is false\n      ,\n      onSubmit: this.signUpClicked,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"username\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"verifyPassword\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Username:\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Password:\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Verify Password\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"verifyPassword\",\n      value: this.state.verifyPassword,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Sign up\")))));\n  }\n\n}\n\nexport default RegisterComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basilClone/basil-app/frontend/src/components/recipes/RegisterComponent.jsx"],"names":["React","Component","UserDataService","Formik","Form","Field","ErrorMessage","RegisterComponent","constructor","props","state","username","password","verifyPassword","role","hasSignUpFailed","showSuccessMessage","handleChange","bind","signUpClicked","validate","event","setState","target","name","value","user","createUser","values","errors","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport UserDataService from '../../api/recipes/UserDataService.js'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\n\n\n\nclass RegisterComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            verifyPassword: '',\n            role: \"ROLE_USER\",\n            hasSignUpFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.signUpClicked = this.signUpClicked.bind(this)\n        // this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    signUpClicked() {\n        let user = {\n            username: this.state.username,\n            password: this.state.password,\n            role: \"ROLE_USER\"\n        }\n\n      \n            UserDataService.createUser(user)\n         \n    }\n\n    // signUpClicked() {\n    //     let user = {\n    //         username: this.state.username,\n    //         password: this.state.password,\n    //         role: \"ROLE_USER\"\n    //     }\n\n    //     if (this.state.password === this.state.verifyPassword) {\n    //         UserDataService.createUser(user)\n    //         this.setState({ showSuccessMessage: true })\n    //         this.setState({ hasSignUpFailed: false })\n    //     } else {\n    //         this.setState({ showSuccessMessage: false })\n    //         this.setState({ hasSignUpFailed: true })\n    //     }\n    // }\n\n    validate(values) {\n        let errors = {}\n        if (!values.username) {\n            errors.username = 'Username can not be blank.'\n        } else if (values.username.length < 3 || values.username.length > 50) {\n            errors.username = 'Username must be between 3 - 50 characters in length'\n        }\n\n        if (!values.password) {\n            errors.password = 'Password can not be blank.'\n        } else if (values.password.length < 3 || values.password.length > 50) {\n            errors.password = 'Password must be between 3 - 50 characters in length'\n        }\n\n        if (values.verifyPassword !== values.password) {\n            errors.verifyPassword = 'Password do not match' \n        } \n\n        return errors\n    }\n\n    // handleKeyPress = e => {\n    //     if (e.key === \"Enter\") {\n    //         let user = {\n    //             username: this.state.username,\n    //             password: this.state.password,\n    //             role: \"ROLE_USER\"\n    //         }\n\n    //         if (this.state.password === this.state.verifyPassword) {\n    //             UserDataService.createUser(user)\n    //             this.setState({ showSuccessMessage: true })\n    //             this.setState({ hasSignUpFailed: false })\n    //         } else {\n    //             this.setState({ showSuccessMessage: false })\n    //             this.setState({ hasSignUpFailed: true })\n    //         }\n    //     }\n    // }\n\n\n\n    render() {\n\n        let {username, password, verifyPassword, showSuccessMessage, hasSignUpFailed } = this.state\n        return (\n            <div>\n\n\n                <h1>Registration</h1>\n                {/* {this.state.hasSignUpFailed && <div className=\"alert alert-warning\">Passwords do not match!</div>}\n                {this.state.showSuccessMessage && <div className=\"alert alert-success\">Registration successful. Return to login page.</div>} */}\n                <div className=\"container\">\n\n                    <Formik\n                            initialValues={{ username, password, verifyPassword, showSuccessMessage, hasSignUpFailed }}\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.signUpClicked}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='username' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='password' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='verifyPassword' component='div' className='alert alert-warning' />\n             \n\n\n                                    <fieldset className='form-group'>\n                                        <label>Username:</label>\n                                        <Field className='form-control' type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                                    </fieldset>\n                                    <fieldset className='form-group'>\n                                        <label>Password:</label>\n                                        <Field className='form-control' type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                                    </fieldset>\n                                    <fieldset>\n                                        <label>Verify Password</label>\n                                        <Field className='form-control' type=\"password\" name=\"verifyPassword\" value={this.state.verifyPassword} onChange={this.handleChange} />\n                                    </fieldset>\n\n\n                                    <button type=\"submit\" className='btn btn-success'>Sign up</button>\n                                    {/* <button type='submit' className=\"btn btn-success\" onClick={this.signUpClicked}>Sign Up</button> */}\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RegisterComponent"]},"metadata":{},"sourceType":"module"}