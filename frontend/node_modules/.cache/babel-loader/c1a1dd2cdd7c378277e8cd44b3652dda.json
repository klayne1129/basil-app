{"ast":null,"code":"import _classCallCheck from\"/Users/KatieLayne/Documents/basilClone/basil-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/KatieLayne/Documents/basilClone/basil-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import axios from'axios';import{API_URL}from'../../Constants.js';//create a constant for the key used for session storage\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME='authenticatedUser';var AuthenticationService=/*#__PURE__*/function(){function AuthenticationService(){_classCallCheck(this,AuthenticationService);}_createClass(AuthenticationService,[{key:\"executeJWTAuthenticationService\",// need to send a post request with the username and password\nvalue:function executeJWTAuthenticationService(username,password){return axios.post(\"\".concat(API_URL,\"/authenticate\"),{username:username,password:password});}},{key:\"registerSuccessfulLoginForJwt\",value:function registerSuccessfulLoginForJwt(username,token){sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);this.setupAxiosInterceptors(this.createJWTToken(token));}},{key:\"createJWTToken\",value:function createJWTToken(token){return'Bearer '+token;}//when a user logs out the value from session storage is removed\n},{key:\"logout\",value:function logout(){sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);}//checks to see if a user has logged in to app\n},{key:\"isUserLoggedIn\",value:function isUserLoggedIn(){var user=sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);if(user===null){return false;}return true;}//gets a specific user\n},{key:\"getLoggedInUser\",value:function getLoggedInUser(){var user=sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);if(user===null){return'';}return user;}//checks if admin\n},{key:\"getAdminUser\",value:function getAdminUser(){var user=sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);if(user==='basil'){return user;}return'';}//this will add an dditional parameter to axios get method call to make sure it sends an \n//authorization header\n// Method adding an intercepter (see axios github documentation) by creating a simple method that\n//adds an authorization header to every request.\n// you want to call this method at log in.\n},{key:\"setupAxiosInterceptors\",value:function setupAxiosInterceptors(token){var _this=this;axios.interceptors.request.use(function(config){if(_this.isUserLoggedIn()){config.headers.authorization=token;}return config;});}//connect to backend BasicAuthenticationController using path\n},{key:\"executeBasicAuthenticationService\",value:function executeBasicAuthenticationService(username,password){return axios.get(\"\".concat(API_URL,\"/basicauth\"),{headers:{authorization:this.createBasicAuthToken(username,password)}});}},{key:\"createBasicAuthToken\",value:function createBasicAuthToken(username,password){return'Basic '+window.btoa(username+\":\"+password);}// whenever a user logs in successfully, send that data to session storage\n},{key:\"registerSuccessfulLogin\",value:function registerSuccessfulLogin(username,password){// console.log(\"registered login\")\nsessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);this.setupAxiosInterceptors(this.createBasicAuthToken(username,password));}}]);return AuthenticationService;}();//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basilClone/basil-app/frontend/src/components/recipes/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","post","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn","headers","authorization","get","createBasicAuthToken","window","btoa"],"mappings":"sRAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,oBAAxB,CACA;AACA,MAAO,IAAMC,CAAAA,gCAAgC,CAAG,mBAAzC,C,GAEDC,CAAAA,qB,kLAEF;+CACgCC,Q,CAAUC,Q,CAAU,CAEhD,MAAOL,CAAAA,KAAK,CAACM,IAAN,WAAcL,OAAd,kBAAsC,CACzCG,QAAQ,CAARA,QADyC,CAEzCC,QAAQ,CAARA,QAFyC,CAAtC,CAAP,CAIH,C,oFAE6BD,Q,CAAUG,K,CAAO,CAC3CC,cAAc,CAACC,OAAf,CAAuBP,gCAAvB,CAAyDE,QAAzD,EACA,KAAKM,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B,EACH,C,sDAEcA,K,CAAO,CAClB,MAAO,UAAYA,KAAnB,CACH,CAED;uCACS,CACLC,cAAc,CAACI,UAAf,CAA0BV,gCAA1B,EACH,CAED;uDACiB,CACb,GAAIW,CAAAA,IAAI,CAAGL,cAAc,CAACM,OAAf,CAAuBZ,gCAAvB,CAAX,CACA,GAAIW,IAAI,GAAK,IAAb,CAAmB,CACf,MAAO,MAAP,CACH,CACD,MAAO,KAAP,CACH,CAED;yDACkB,CACd,GAAIA,CAAAA,IAAI,CAAGL,cAAc,CAACM,OAAf,CAAuBZ,gCAAvB,CAAX,CACA,GAAIW,IAAI,GAAK,IAAb,CAAmB,CACf,MAAO,EAAP,CACH,CACD,MAAOA,CAAAA,IAAP,CACH,CACD;mDACe,CACX,GAAIA,CAAAA,IAAI,CAAGL,cAAc,CAACM,OAAf,CAAuBZ,gCAAvB,CAAX,CACA,GAAIW,IAAI,GAAK,OAAb,CAAsB,CAClB,MAAOA,CAAAA,IAAP,CACH,CACD,MAAO,EAAP,CACH,CAED;AACA;AACA;AACA;AACA;sEACuBN,K,CAAO,gBAC1BP,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,SAACC,MAAD,CAAY,CACR,GAAI,KAAI,CAACC,cAAL,EAAJ,CAA2B,CACvBD,MAAM,CAACE,OAAP,CAAeC,aAAf,CAA+Bd,KAA/B,CACH,CACD,MAAOW,CAAAA,MAAP,CACH,CANL,EAQH,CAGD;4FACkCd,Q,CAAUC,Q,CAAU,CAElD,MAAOL,CAAAA,KAAK,CAACsB,GAAN,WAAarB,OAAb,eACH,CAAEmB,OAAO,CAAE,CAAEC,aAAa,CAAE,KAAKE,oBAAL,CAA0BnB,QAA1B,CAAoCC,QAApC,CAAjB,CAAX,CADG,CAAP,CAEH,C,kEAEoBD,Q,CAAUC,Q,CAAU,CACrC,MAAO,SAAWmB,MAAM,CAACC,IAAP,CAAYrB,QAAQ,CAAG,GAAX,CAAiBC,QAA7B,CAAlB,CACH,CAED;wEACwBD,Q,CAAUC,Q,CAAU,CAExC;AACAG,cAAc,CAACC,OAAf,CAAuBP,gCAAvB,CAAyDE,QAAzD,EACA,KAAKM,sBAAL,CAA4B,KAAKa,oBAAL,CAA0BnB,QAA1B,CAAoCC,QAApC,CAA5B,EAEH,C,qCAIL;AACA;AACA,cAAe,IAAIF,CAAAA,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants.js'\n//create a constant for the key used for session storage\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    // need to send a post request with the username and password\n    executeJWTAuthenticationService(username, password) {\n\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    //when a user logs out the value from session storage is removed\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    //checks to see if a user has logged in to app\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return false\n        }\n        return true\n    }\n\n    //gets a specific user\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return ''\n        }\n        return user\n    }\n    //checks if admin\n    getAdminUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === 'basil') {\n            return user\n        }\n        return ''\n    }\n\n    //this will add an dditional parameter to axios get method call to make sure it sends an \n    //authorization header\n    // Method adding an intercepter (see axios github documentation) by creating a simple method that\n    //adds an authorization header to every request.\n    // you want to call this method at log in.\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n\n\n    //connect to backend BasicAuthenticationController using path\n    executeBasicAuthenticationService(username, password) {\n\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    // whenever a user logs in successfully, send that data to session storage\n    registerSuccessfulLogin(username, password) {\n\n        // console.log(\"registered login\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n\n    }\n\n}\n\n//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}